#!/usr/bin/env python
# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.


"""
This file is a test for inverse kinematics on the stretch robot. It makes sure we can reach and execute different positions, which have been generated by the grasp planner. It's a useful utility for now.
"""

import click
import numpy as np
import rospy
from geometry_msgs.msg import TransformStamped

from home_robot.agent.hierarchical.pick_and_place_agent import PickAndPlaceAgent
from home_robot.core.interfaces import DiscreteNavigationAction
from home_robot.motion.stretch import STRETCH_HOME_Q
from home_robot.utils.config import get_config
from home_robot.utils.geometry import posquat2sophus, sophus2posquat, xyt2sophus
from home_robot.utils.pose import to_pos_quat
from home_robot_hw.env.stretch_pick_and_place_env import (
    StretchPickandPlaceEnv,
    load_config,
)
from home_robot_hw.ros.utils import matrix_to_pose_msg, ros_pose_to_transform


def test_motion(env, robot, joint_poses, wait=True):
    """
    Test motion to a pose with custom velocity per joint.
    """ 
    STRETCH_HOME_dQ = np.array(
        [
            0.1,  # x
            0.1,  # y
            0.1,  # theta
            0.05,  # lift
            0.05,  # arm
            0.2,  # gripper roll py
            0.2,    # pitch
            0.2,    # yaw
            0.2,  # gripper open/close,
            0.2,   # head pan
            0.2,    # head tilt
        ]
    )
    env.robot.manip.goto(joint_poses, dq=STRETCH_HOME_dQ, wait=wait)
    return True
    

@click.command()
@click.option("--visualize-maps", default=False, is_flag=True)
@click.option("--reset-nav", default=False, is_flag=True)
@click.option("--test-id", default=0, type=int)
def run_experiment(visualize_maps=False, test_id=0, reset_nav=False, **kwargs):
    config = load_config(visualize=visualize_maps, **kwargs)
    rospy.init_node("eval_episode_stretch_objectnav")
    env = StretchPickandPlaceEnv(config=config)
    env.reset("table", "cup", "chair")
    robot = env.get_robot()

    if reset_nav:
        # Send it back to origin position to make testing a bit easier
        robot.nav.navigate_to([0, 0, 0])

    # Put it into initial posture
    env.robot.move_to_manip_posture()

    # x, lift, arm, roll, pitch, yaw
    dof = len(STRETCH_HOME_Q)
    result = test_motion(env, robot, STRETCH_HOME_Q)
    assert result, "Failed to move to home position with custom velocity."
    
    
if __name__ == "__main__":
    run_experiment()
